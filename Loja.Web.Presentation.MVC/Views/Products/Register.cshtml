@model Loja.Web.Presentation.Models.Registration.Product.ProductsModel

@{
    ViewData["Title"] = "Register | Products";
}

<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="~/css/Global/00_Global.css" />
</head>
<body>
    <div class="register-wrapper">

        <div>
            <h1 class="register-title">Register</h1>
        </div>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="register-form">

                @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
                {
                    <div class="register-alert">
                        <p>@ViewBag.ErrorMessage</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
                {
                    <div class="register-success">
                        <p>@ViewBag.SuccessMessage</p>
                    </div>
                }

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            placeholder = "Name"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.TextAreaFor(model => model.Description, new
                        {
                            @placeholder = "Description"
                        })
                </div>

                <div class="register-select-field">
                    <select name="subcategories" class="register-select" id="register-select-subcategories">
                        <option value="">Select a subcategory</option>
                    </select>
                </div>

                <div class="register-select-field">
                    <select name="manufacturers" class="register-select" id="register-select-manufacturers">
                        <option value="">Select a manufacturer</option>
                    </select>
                </div>

                <h2 class="register-title-2">Product prices</h2>

                <div class="register-select-field">
                    <select name="currencies" class="register-select" id="register-select-currencies">
                        <option value="">Select a currency</option>
                    </select>
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-price",
                            placeholder = "Price"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            pattern = "^[0-9]*$",
                            placeholder = "Discount"
                        }
                    })
                </div>

                <h2 class="register-title-2">Product measures</h2>

                <div class="register-select-field">
                    <select name="weight-measure" class="register-select" id="register-select-mass-measurements">
                        <option value="">Select mass measurement</option>
                    </select>
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Weight, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-weight",
                            placeholder = "Weight"
                        }
                    })
                </div>

                <div class="register-select-field">
                    <select name="height-measure" class="register-select" id="register-select-height-measurements">
                        <option value="">Select height measurement</option>
                    </select>
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-height",
                            placeholder = "Height"
                        }
                    })
                </div>

                <div class="register-select-field">
                    <select name="width-measure" class="register-select" id="register-select-width-measurements">
                        <option value="">Select width measurement</option>
                    </select>
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Width, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-width",
                            placeholder = "Width"
                        }
                    })
                </div>

                <div class="register-select-field">
                    <select name="length-measure" class="register-select" id="register-select-length-measurements">
                        <option value="">Select length measurement</option>
                    </select>
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Length, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-length",
                            placeholder = "Length"
                        }
                    })
                </div>

                <h2 class="register-title-2">Stock details</h2>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Stock, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            pattern = "^[0-9]*$",
                            placeholder = "Quantity",
                            min = "0"
                        }
                    })
                </div>

                <div class="register-input-field">
                    <button type="submit" class="register-btn-submit" name="register" id="register">Register</button>
                </div>

            </div>
        }

    </div>
</body>

@section Scripts {

    <script src="~/lib/plentz-jquery-maskmoney-cdbeeac/dist/jquery.maskMoney.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.10/jquery.mask.js"></script>

    <script>

        $(document).ready(function () {
            $('#register-input-price').maskMoney();
            $('#register-input-weight').mask("#0.000", {reverse: true});
            $('#register-input-height').mask("#0.000", {reverse: true});
            $('#register-input-width').mask("#0.000", {reverse: true});
            $('#register-input-length').mask("#0.000", {reverse: true});
            
            GetManufacturers();
            GetSubcategories();
            GetCurrencies();
            GetMeasurements();
        });

        function GetManufacturers() {
            $.ajax({
                async: true,
                type: "GET",
                dataType: "json",
                url: "/Manufacturers/Get",
                success: function(result) {
                    if (result.Code == 1) {
                        SetComboBoxManufacturers(result.Manufacturers);
                    }
                    else {
                        alert(result.Message);
                    }
                },
                error: function(req, status, error) {
                    alert('Error: ', error);
                }
            });
        }

        function GetSubcategories() {
            $.ajax({
                async: true,
                type: "GET",
                dataType: "json",
                url: "/Subcategories/Get",
                success: function(result) {
                    if (result.Code == 1) {
                        SetComboBoxSubcategories(result.Subcategories);
                    }
                    else {
                        alert(result.Message);
                    }
                },
                error: function(req, status, error) {
                    alert('Error: ', error);
                }
            });
        }

        function GetCurrencies() {
            $.ajax({
                async: true,
                type: "GET",
                dataType: "json",
                url: "/Currencies/Get",
                success: function(result) {
                    if (result.Code == 1) {
                        SetComboBoxCurrencies(result.Currencies);
                    }
                    else {
                        alert(result.Message);
                    }
                },
                error: function(req, status, error) {
                    alert('Error: ', error);
                }
            });
        }

        function GetMeasurements() {
            $.ajax({
                async: true,
                type: "GET",
                dataType: "json",
                url: "/Measurements/Get",
                success: function(result) {
                    if (result.Code == 1) {
                        SetComboBoxMeasurements(result.Measurements);
                    }
                    else {
                        alert(result.Message);
                    }
                },
                error: function(req, status, error) {
                    alert('Error: ', error);
                }
            });
        }

        function SetComboBoxManufacturers(manufacturers) {
            $.each(manufacturers, function(i, item) {
                $('#register-select-manufacturers').append(`<option value="${manufacturers[i].guidID}">${manufacturers[i].name}</option>`);
            });
        }

        function SetComboBoxSubcategories(subcategories) {
            $.each(subcategories, function(i, item) {
                $('#register-select-subcategories').append(`<option value="${subcategories[i].guidID}">${subcategories[i].name}</option>`);
            });
        }

        function SetComboBoxCurrencies(currencies) {
            $.each(currencies, function(i, item) {
                $('#register-select-currencies').append(`<option value="${currencies[i].guidID}">${currencies[i].name}</option>`);
            });
        }

        function SetComboBoxMeasurements(measurements) {
            var mass = measurements.filter(function(value) { return value.measurementTypeID == 1 });
            var height = measurements.filter(function(value) { return value.measurementTypeID == 2 });

            $.each(height, function(i, item) {
                $('#register-select-height-measurements').append(`<option value="${height[i].guidID}">${height[i].name}</option>`);
                $('#register-select-width-measurements').append(`<option value="${height[i].guidID}">${height[i].name}</option>`);
                $('#register-select-length-measurements').append(`<option value="${height[i].guidID}">${height[i].name}</option>`);
            });

            $.each(mass, function(i, item) {
                $('#register-select-mass-measurements').append(`<option value="${mass[i].guidID}">${mass[i].name}</option>`);
            });
        }

    </script>

}