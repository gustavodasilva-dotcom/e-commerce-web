@model Loja.Web.Presentation.Models.Registration.Manufacturer.ManufacturersModel

@{
    ViewData["Title"] = "Register | Manufacturers";
}

<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="~/css/Global/00_Global.css" />
</head>
<body>
    <div class="register-wrapper">

        <div>
            <h1 class="register-title">Register</h1>
        </div>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="register-form">

                @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
                {
                    <div class="register-alert">
                        <p>@ViewBag.ErrorMessage</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
                {
                    <div class="register-success">
                        <p>@ViewBag.SuccessMessage</p>
                    </div>
                }

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            placeholder = "Name"
                        }
                    })
                </div>

                <div class="register-input-field">
                    <label>Brazilian company?</label>
                    <div>
                        <input type="radio" class="register-input-radio" name="localition" id="localition_brazil" value="true" />
                        <label for="localition_brazil">Yes</label>
                    </div>
                    <div>
                        <input type="radio" class="register-input-radio" name="localition" id="localition_foreign" value="false" />
                        <label for="localition_foreign">No</label>
                    </div>
                </div>

                <div id="register-input-foreigh" style="display:none;">
                    <div class="register-input-field">
                        @Html.EditorFor(model => model.CAGE, new { htmlAttributes = new
                            {
                                @class = "register-input",
                                placeholder = "CAGE"
                            }
                        })
                    </div>

                    <div class="register-input-field">
                        @Html.EditorFor(model => model.NCAGE, new { htmlAttributes = new
                            {
                                @class = "register-input",
                                placeholder = "NCAGE"
                            }
                        })
                    </div>

                    <div class="register-input-field">
                        @Html.EditorFor(model => model.SEC, new { htmlAttributes = new
                            {
                                @class = "register-input",
                                placeholder = "SEC"
                            }
                        })
                    </div>
                </div>

                <div id="register-input-brazilian" style="display:none;">
                    <div class="register-input-field">
                        @Html.EditorFor(model => model.FederalTaxpayerRegistrationNumber, new { htmlAttributes = new
                            {
                                @class = "register-input",
                                id = "register-input-federal-taxpayer-registration",
                                placeholder = "Federal taxpayer registration"
                            }
                        })
                    </div>

                    <div class="register-input-field">
                        @Html.EditorFor(model => model.StateTaxpayerRegistrationNumber, new { htmlAttributes = new
                            {
                                @class = "register-input",
                                id = "state-input-federal-taxpayer-registration",
                                placeholder = "State taxpayer registration"
                            }
                        })
                    </div>
                </div>

                <h2 class="register-title-2">Contact info</h2>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Contacts.Phone, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-phone",
                            placeholder = "Phone"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Contacts.Cellphone, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "register-input-cellphone",
                            placeholder = "Cellphone"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Contacts.Email, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            placeholder = "Email"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Contacts.Website, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            placeholder = "Website"
                        }
                    })
                </div>

                <h2 class="register-title-2">Address info</h2>

                <div class="register-alert" id="register-address-alert" style="display:none;">
                    <p id="register-address-error-message"></p>
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.PostalCode, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id="address-postal-code",
                            placeholder = "Postal code"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.Name, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id="address-name",
                            placeholder = "Name"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.Number, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "address-number",
                            placeholder = "Number"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.Comment, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "address-comment",
                            placeholder = "Comment"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.Neighborhood, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "address-neighborhood",
                            placeholder = "Neighborhood"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.City, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "address-city",
                            placeholder = "City"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.State, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "address-state",
                            placeholder = "State"
                        }
                    })
                </div>

                <div class="register-input-field">
                    @Html.EditorFor(model => model.Addresses.Country, new { htmlAttributes = new
                        {
                            @class = "register-input",
                            id = "address-country",
                            placeholder = "Country"
                        }
                    })
                </div>

                <div class="register-input-field">
                    <button type="submit" class="register-btn-submit" name="register" id="register">Register</button>
                </div>

            </div>
        }

    </div>
</body>

@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.mask/1.14.10/jquery.mask.js"></script>

    <script>

        $(document).ready(function() {
            $('#register-input-brazilian').show();
            $('#localition_brazil').prop('checked', true);
            $('#register-input-phone').mask('(00) 0000-0000');
            $('#address-postal-code').mask('00000-000');
            $('#register-input-cellphone').mask('(00) 0 0000-0000');
            $('#register-input-federal-taxpayer-registration').mask('00.000.000/0000-00');
            ReadonlyAddressInputs(true);
        });

        $('#localition_brazil').change(function() {
            $('#register-input-phone').mask('(00) 0000-0000');
            $('#address-postal-code').mask('00000-000');
            $('#register-input-cellphone').mask('(00) 0 0000-0000');
            $('#register-input-federal-taxpayer-registration').mask('00.000.000/0000-00');
        });

        $('#localition_foreign').change(function() {
            $('#register-input-phone').unmask();
            $('#address-postal-code').unmask();
            $('#register-input-cellphone').unmask();
            $('#register-input-federal-taxpayer-registration').unmask();
        });

        $('#localition_brazil').click(function() {
            $('#register-input-foreigh').hide();
            $('#register-input-brazilian').show();

            ReadonlyAddressInputs(true);
        });

        $('#localition_foreign').click(function() {
            $('#register-input-foreigh').show();
            $('#register-input-brazilian').hide();

            ReadonlyAddressInputs(false);
        });

        $('#address-postal-code').focusout(function() {
            if ($('input[id="localition_brazil"]:checked').length > 0) {
                var postal_code = $(this).val();

                $.ajax({
                    async: true,
                    type: "GET",
                    dataType: "json",
                    url: "/Addresses/Get",
                    data: { postalCode: postal_code },
                    success: function(result) {
                        if (result.code == 1) {
                            SetAddressInputValues(result);
                            DisplayAddressErrorMessage(false, '');
                        }
                        else {
                            DisplayAddressErrorMessage(true, result.message);
                            ReadonlyAddressInputs(true);
                            CleanAddressInputValues();
                        }
                    },
                    error: function(req, status, error) {
                        alert('Error: ', error);
                    }
                });
            }
        });

        function ReadonlyAddressInputs(readonly) {
            if (readonly) {
                $('#address-name').prop('readonly', true);
                $('#address-neighborhood').prop('readonly', true);
                $('#address-city').prop('readonly', true);
                $('#address-state').prop('readonly', true);
                $('#address-country').prop('readonly', true);
            }
            else {
                $('#address-name').prop('readonly', false);
                $('#address-neighborhood').prop('readonly', false);
                $('#address-city').prop('readonly', false);
                $('#address-state').prop('readonly', false);
                $('#address-country').prop('readonly', false);
            }
        }

        function SetAddressInputValues(model) {
            $('#address-name').val(model.street.name);
            $('#address-name').prop('readonly', true);

            $('#address-neighborhood').val(model.neighborhood.name);
            $('#address-neighborhood').prop('readonly', true);

            $('#address-city').val(model.city.name);
            $('#address-city').prop('readonly', true);

            $('#address-state').val(model.state.initials);
            $('#address-state').prop('readonly', true);

            $('#address-country').val(model.country.name);
            $('#address-country').prop('readonly', true);
        }

        function CleanAddressInputValues() {
            $('#address-name').val('');
            $('#address-neighborhood').val('');
            $('#address-city').val('');
            $('#address-state').val('');
            $('#address-country').val('');
        }

        function DisplayAddressErrorMessage(display, error) {
            if (display) {
                $('#register-address-alert').show();
                $('#register-address-error-message').text(error);
            }
            else {
                $('#register-address-alert').hide();
            }
        }

    </script>

}